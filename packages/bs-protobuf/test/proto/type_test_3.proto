
syntax = "proto3";

package typeTest3;

message Basic {
  optional string stringField = 1;
  optional int32 int32Field = 2;
}

message Required {
  string stringField = 1;
  int32 int32Field = 2;
}

message Capitalization {
  optional string StringField = 1;
  optional int32 Int32Field = 2;
}

enum EnumType {
  EnumV0 = 0;
  EnumV1 = 1;
  EnumV2 = 2;
}

message Typeful {
  enum EnumTypeE {
    EnumVE0 = 0;
    EnumVE1 = 1;
    EnumVE2 = 2;
  }
  optional string stringField = 1;
  optional int32 int32Field = 2;
  optional int64 int64Field = 3;
  optional EnumType enumField = 4;
  optional EnumTypeE enumEField = 5;
  optional Basic basicField = 6;
  oneof valueField {
    int32 int32Value = 7;
    int64 int64Value = 8;
  }
  repeated string repeatedStringField=9;
  optional bytes bytesField=10;
  optional uint64 uint64Field=11;
  optional sint64 sint64Field=12;
  optional fixed64 fixed64Field=13;
  optional sfixed64 sfixed64Field=14;
  optional uint32 uint32Field=15;
  optional sint32 sint32Field=16;
  optional fixed32 fixed32Field=17;
  optional sfixed32 sfixed32Field=18;
  optional float floatField=19;
  optional double doubleField=20;
  map<string, string> mapStringStringField=21;
  map<int32, string> mapInt32StringField=22;
  map<int64, string> mapInt64StringField=23;
  optional bool boolField=24;
  map<bool, string> mapBoolStringField=25;
  google.protobuf.Any anyField=26;
}

message Empty {
}

message Nested {
  message Message {
    optional string stringField = 1;
    optional int32 int32Field = 2;
  }
}

message ResolutionTest {
  enum Enum1 {
    VOuter0 = 0;
    VOuter1 = 1;
  }
  message Type1 {
    optional string outer=1;
  }
  // Note: Nested outer enum and message fail to compile with protobufjs.
  // So, these are missing from this test proto.
  message Message {
    enum Enum1 {
      VInner2 = 2;
      VInner3 = 3;
    }
    message Type1 {
      optional string inner=1;
    }
    message Nested {
      enum Enum1 {
        VOuter6 = 6;
        VOuter7 = 7;
      }
      message Type1 {
        optional string nestedInner=1;
      }
    }
    Enum1 inner=1;
    .Enum1 outer=2;
    Nested.Enum1 nestedInner=3;
    Type1 typeInner=4;
    .Type1 typeOuter=5;
    Nested.Type1 nestedTypeInner=6;
  }
}
